// SPDX-License-Identifier: MIT

pragma solidity ^0.7;

import "@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol";
import "./CacheGoldLockedDataAPIConsumer.sol";

interface KeeperCompatibleInterface {
    function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);
    function performUpkeep(bytes calldata performData) external;
}

contract CacheGoldLockedDataCronKeeper is KeeperCompatibleInterface {
    /**
    * Public counter variable
    */
    uint public counter;


    /**
    * Use an interval in seconds and a timestamp to slow execution of Upkeep
    */
    uint public immutable interval;
    uint public lastTimeStamp;
    
    address public cacheGoldLockedDataAPIConsumer;

    
    constructor(uint updateInterval, address _cacheGoldLockedDataAPIConsumer) {
      interval = updateInterval;
      lastTimeStamp = block.timestamp;
      cacheGoldLockedDataAPIConsumer = _cacheGoldLockedDataAPIConsumer;
      counter = 0;
    }


    function checkUpkeep(bytes calldata checkData) external  override view returns  (bool upkeepNeeded, bytes memory performData)   {
        if((block.timestamp - lastTimeStamp) > interval){
            return(true, abi.encodeWithSignature("requestedLockedData(string)", "grams_locked")); 
        }
        else{
            return (false, checkData);
        }
    }

    function performUpkeep(bytes calldata performData) external override {
        lastTimeStamp = block.timestamp;
        counter = counter + 1;
    
        // We don't use the performData in this example
        // performData is generated by the Keeper's call to your `checkUpkeep` function
        address(cacheGoldLockedDataAPIConsumer).call(performData);
    }
}